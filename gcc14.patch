Fix building with C++14, which errors out due to narrowing conversions.
See also: https://bugs.gentoo.org/show_bug.cgi?id=593932

--- a/src/uipp/base/minus.bm
+++ b/src/uipp/base/minus.bm
@@ -1,6 +1,6 @@
 #define minus_width 12
 #define minus_height 14
 static char minus_bits[] = {
-   0x00, 0x00, 0x00, 0x00, 0xfe, 0x0f, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08,
-   0x02, 0x08, 0xfa, 0x0b, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08,
-   0xfe, 0x0f, 0x00, 0x00};
+   0x00, 0x00, 0x00, 0x00, (char)0xfe, 0x0f, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08,
+   0x02, 0x08, (char)0xfa, 0x0b, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08, 0x02, 0x08,
+   (char)0xfe, 0x0f, 0x00, 0x00};
--- a/src/uipp/base/plus.bm
+++ b/src/uipp/base/plus.bm
@@ -1,6 +1,6 @@
 #define plus_width 12
 #define plus_height 14
 static char plus_bits[] = {
-   0x00, 0x00, 0x00, 0x00, 0xfe, 0x0f, 0x02, 0x08, 0x42, 0x08, 0x42, 0x08,
-   0x42, 0x08, 0xfa, 0x0b, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x02, 0x08,
-   0xfe, 0x0f, 0x00, 0x00};
+   0x00, 0x00, 0x00, 0x00, (char)0xfe, 0x0f, 0x02, 0x08, 0x42, 0x08, 0x42, 0x08,
+   0x42, 0x08, (char)0xfa, 0x0b, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x02, 0x08,
+   (char)0xfe, 0x0f, 0x00, 0x00};
--- a/src/uipp/dxuilib/anchor.bm
+++ b/src/uipp/dxuilib/anchor.bm
@@ -3,8 +3,8 @@
 #define anchor_x_hot -1
 #define anchor_y_hot -1
 static char anchor_bits[] = {
-   0x80, 0x03, 0x00, 0x40, 0x05, 0x00, 0xc0, 0x02, 0x00, 0x40, 0x05, 0x00,
-   0x80, 0x02, 0x00, 0x10, 0x11, 0x00, 0x30, 0x09, 0x00, 0x50, 0x15, 0x00,
-   0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0x82, 0x00, 0x85, 0x41, 0x01,
-   0xfa, 0xbe, 0x00, 0x54, 0x55, 0x00, 0xa8, 0x2a, 0x00, 0x50, 0x15, 0x00,
-   0x80, 0x02, 0x00};
+   (char)0x80, 0x03, 0x00, 0x40, 0x05, 0x00, (char)0xc0, 0x02, 0x00, 0x40, 0x05, 0x00,
+   (char)0x80, 0x02, 0x00, 0x10, 0x11, 0x00, 0x30, 0x09, 0x00, 0x50, 0x15, 0x00,
+   0x01, 0x01, 0x01, 0x01, 0x01, 0x01, (char)0x83, (char)0x82, 0x00, (char)0x85, 0x41, 0x01,
+   (char)0xfa, (char)0xbe, 0x00, 0x54, 0x55, 0x00, (char)0xa8, 0x2a, 0x00, 0x50, 0x15, 0x00,
+   (char)0x80, 0x02, 0x00};
--- a/src/uipp/dxuilib/animation.bm
+++ b/src/uipp/dxuilib/animation.bm
@@ -4,7 +4,7 @@
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-   0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
+   (char)0xe0, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
@@ -20,7 +20,7 @@
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
-   0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00,
+   (char)0xe0, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/anim_mask.bm
+++ b/src/uipp/dxuilib/anim_mask.bm
@@ -3,24 +3,24 @@
 static char anim_mask_bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-   0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00,
-   0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00,
-   0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
-   0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
-   0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00,
-   0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00,
+   (char)0xf0, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x3f, 0x00,
+   (char)0xf8, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x7f, 0x00,
+   (char)0xfc, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xe0, 0x00,
+   (char)0xfc, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x00,
+   (char)0xf8, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x7f, 0x00,
+   (char)0xf0, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x3f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/pagedrag.bm
+++ b/src/uipp/dxuilib/pagedrag.bm
@@ -1,14 +1,14 @@
 #define pagedrag_width 32
 #define pagedrag_height 32
 static char pagedrag_bits[] = {
-   0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00,
-   0x04, 0xf0, 0x01, 0x00, 0x04, 0xb0, 0x01, 0x00, 0x07, 0xf0, 0xff, 0x0f,
+   0x00, 0x00, 0x00, 0x00, (char)0xfc, 0x3f, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00,
+   0x04, (char)0xf0, 0x01, 0x00, 0x04, (char)0xb0, 0x01, 0x00, 0x07, (char)0xf0, (char)0xff, 0x0f,
    0x01, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x7c,
    0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x5c,
-   0x01, 0xed, 0x0a, 0x6c, 0x01, 0xa5, 0x0e, 0x5c, 0x01, 0xe5, 0x0a, 0x6c,
+   0x01, (char)0xed, 0x0a, 0x6c, 0x01, (char)0xa5, 0x0e, 0x5c, 0x01, (char)0xe5, 0x0a, 0x6c,
    0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x5c,
-   0x01, 0x00, 0x00, 0x6c, 0xff, 0xff, 0xff, 0x5f, 0xff, 0xff, 0xff, 0x6f,
-   0x58, 0x55, 0x55, 0x55, 0xa8, 0xaa, 0xaa, 0x6a, 0xf8, 0xff, 0xff, 0x7f,
+   0x01, 0x00, 0x00, 0x6c, (char)0xff, (char)0xff, (char)0xff, 0x5f, (char)0xff, (char)0xff, (char)0xff, 0x6f,
+   0x58, 0x55, 0x55, 0x55, (char)0xa8, (char)0xaa, (char)0xaa, 0x6a, (char)0xf8, (char)0xff, (char)0xff, 0x7f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/pagedragmask.bm
+++ b/src/uipp/dxuilib/pagedragmask.bm
@@ -1,14 +1,14 @@
 #define pagedragmask_width 32
 #define pagedragmask_height 32
 static char pagedragmask_bits[] = {
-   0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00,
-   0x5c, 0xf5, 0x01, 0x00, 0xac, 0xfa, 0x01, 0x00, 0x5f, 0xf5, 0xff, 0x0f,
-   0xaf, 0xfa, 0xff, 0x0f, 0x57, 0x55, 0x55, 0x0d, 0xab, 0xaa, 0xaa, 0x7e,
-   0x57, 0x55, 0x55, 0x7d, 0xab, 0xaa, 0xaa, 0x7e, 0x57, 0x55, 0x55, 0x7d,
-   0xab, 0xef, 0xaa, 0x7e, 0x57, 0xb5, 0x5f, 0x7d, 0xab, 0xef, 0xaa, 0x7e,
-   0x57, 0x55, 0x55, 0x7d, 0xab, 0xaa, 0xaa, 0x7e, 0x57, 0x55, 0x55, 0x7d,
-   0xab, 0xaa, 0xaa, 0x7e, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f,
-   0xf8, 0xff, 0xff, 0x7f, 0xf8, 0xff, 0xff, 0x7f, 0xf8, 0xff, 0xff, 0x7f,
+   0x00, 0x00, 0x00, 0x00, (char)0xfc, 0x3f, 0x00, 0x00, (char)0xfc, 0x3f, 0x00, 0x00,
+   0x5c, (char)0xf5, 0x01, 0x00, (char)0xac, (char)0xfa, 0x01, 0x00, 0x5f, (char)0xf5, (char)0xff, 0x0f,
+   (char)0xaf, (char)0xfa, (char)0xff, 0x0f, 0x57, 0x55, 0x55, 0x0d, (char)0xab, (char)0xaa, (char)0xaa, 0x7e,
+   0x57, 0x55, 0x55, 0x7d, (char)0xab, (char)0xaa, (char)0xaa, 0x7e, 0x57, 0x55, 0x55, 0x7d,
+   (char)0xab, (char)0xef, (char)0xaa, 0x7e, 0x57, (char)0xb5, 0x5f, 0x7d, (char)0xab, (char)0xef, (char)0xaa, 0x7e,
+   0x57, 0x55, 0x55, 0x7d, (char)0xab, (char)0xaa, (char)0xaa, 0x7e, 0x57, 0x55, 0x55, 0x7d,
+   (char)0xab, (char)0xaa, (char)0xaa, 0x7e, (char)0xff, (char)0xff, (char)0xff, 0x7f, (char)0xff, (char)0xff, (char)0xff, 0x7f,
+   (char)0xf8, (char)0xff, (char)0xff, 0x7f, (char)0xf8, (char)0xff, (char)0xff, 0x7f, (char)0xf8, (char)0xff, (char)0xff, 0x7f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/postit.bm
+++ b/src/uipp/dxuilib/postit.bm
@@ -3,9 +3,9 @@
 #define postit_x_hot 11
 #define postit_y_hot 0
 static char postit_bits[] = {
-   0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0x54, 0x55, 0xd5, 0xaa, 0xaa, 0xaa,
-   0x54, 0x41, 0xd5, 0xaa, 0xa8, 0xaa, 0x54, 0x75, 0xd5, 0xaa, 0xbc, 0xaa,
-   0x54, 0x55, 0xd5, 0xaa, 0xaa, 0xaa, 0x54, 0x41, 0xd5, 0xaa, 0xa8, 0xaa,
-   0x54, 0x75, 0xd5, 0xaa, 0xa8, 0xaa, 0x54, 0x75, 0xd5, 0xaa, 0xa8, 0xaa,
-   0x54, 0x75, 0xd5, 0xaa, 0xa8, 0xaa, 0x54, 0x75, 0xd5, 0xaa, 0xbc, 0xaa,
-   0x54, 0x55, 0xd5, 0xaa, 0xaa, 0xaa, 0x54, 0x55, 0xd5, 0xfe, 0xff, 0xff};
+   0x00, 0x00, 0x00, (char)0xaa, (char)0xaa, (char)0xaa, 0x54, 0x55, (char)0xd5, (char)0xaa, (char)0xaa, (char)0xaa,
+   0x54, 0x41, (char)0xd5, (char)0xaa, (char)0xa8, (char)0xaa, 0x54, 0x75, (char)0xd5, (char)0xaa, (char)0xbc, (char)0xaa,
+   0x54, 0x55, (char)0xd5, (char)0xaa, (char)0xaa, (char)0xaa, 0x54, 0x41, (char)0xd5, (char)0xaa, (char)0xa8, (char)0xaa,
+   0x54, 0x75, (char)0xd5, (char)0xaa, (char)0xa8, (char)0xaa, 0x54, 0x75, (char)0xd5, (char)0xaa, (char)0xa8, (char)0xaa,
+   0x54, 0x75, (char)0xd5, (char)0xaa, (char)0xa8, (char)0xaa, 0x54, 0x75, (char)0xd5, (char)0xaa, (char)0xbc, (char)0xaa,
+   0x54, 0x55, (char)0xd5, (char)0xaa, (char)0xaa, (char)0xaa, 0x54, 0x55, (char)0xd5, (char)0xfe, (char)0xff, (char)0xff};
--- a/src/uipp/dxuilib/ticks_in.bm
+++ b/src/uipp/dxuilib/ticks_in.bm
@@ -2,6 +2,6 @@
 #define ticks_in_height 16
 static char ticks_in_bits[] = {
    0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00,
-   0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x82, 0x20, 0x00,
-   0x82, 0x20, 0x00, 0x92, 0x24, 0x01, 0x92, 0x24, 0x01, 0x92, 0x24, 0x01,
-   0x92, 0x24, 0x01, 0xfe, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+   0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, (char)0x82, 0x20, 0x00,
+   (char)0x82, 0x20, 0x00, (char)0x92, 0x24, 0x01, (char)0x92, 0x24, 0x01, (char)0x92, 0x24, 0x01,
+   (char)0x92, 0x24, 0x01, (char)0xfe, (char)0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/ticks_in_ins.bm
+++ b/src/uipp/dxuilib/ticks_in_ins.bm
@@ -3,5 +3,5 @@
 static char ticks_in_ins_bits[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
-   0x82, 0x20, 0x00, 0x10, 0x04, 0x01, 0x82, 0x20, 0x00, 0x10, 0x04, 0x01,
-   0x82, 0x20, 0x00, 0x54, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+   (char)0x82, 0x20, 0x00, 0x10, 0x04, 0x01, (char)0x82, 0x20, 0x00, 0x10, 0x04, 0x01,
+   (char)0x82, 0x20, 0x00, 0x54, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/dxuilib/ticks_out.bm
+++ b/src/uipp/dxuilib/ticks_out.bm
@@ -3,5 +3,5 @@
 static char ticks_out_bits[] = {
    0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00,
-   0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0xfe, 0xff, 0x03, 0x24, 0x49, 0x02,
+   0x02, 0x00, 0x00, 0x02, 0x00, 0x00, (char)0xfe, (char)0xff, 0x03, 0x24, 0x49, 0x02,
    0x24, 0x49, 0x02, 0x24, 0x49, 0x02, 0x20, 0x08, 0x02, 0x20, 0x08, 0x02};
--- a/src/uipp/dxuilib/ticks_out_ins.bm
+++ b/src/uipp/dxuilib/ticks_out_ins.bm
@@ -3,5 +3,5 @@
 static char ticks_out_ins_bits[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
-   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x02, 0x04, 0x41, 0x00,
+   0x02, 0x00, 0x00, 0x00, 0x00, 0x00, (char)0xaa, (char)0xaa, 0x02, 0x04, 0x41, 0x00,
    0x20, 0x08, 0x02, 0x04, 0x41, 0x00, 0x20, 0x08, 0x02, 0x00, 0x00, 0x00};
--- a/src/uipp/prompter/col_insens.bm
+++ b/src/uipp/prompter/col_insens.bm
@@ -1,8 +1,8 @@
 #define col_insens_width 20
 #define col_insens_height 20
 static char col_insens_bits[] = {
-   0x00, 0x00, 0x00, 0x55, 0x55, 0x05, 0x00, 0x00, 0x08, 0x00, 0x80, 0x02,
-   0x00, 0x28, 0x00, 0x80, 0x02, 0x00, 0x28, 0x00, 0x00, 0x02, 0x00, 0x00,
-   0x55, 0x55, 0x05, 0x00, 0x00, 0x08, 0x00, 0x80, 0x02, 0x00, 0x28, 0x00,
-   0x80, 0x02, 0x01, 0x28, 0x00, 0x02, 0x02, 0x00, 0x04, 0x55, 0x55, 0x0d,
+   0x00, 0x00, 0x00, 0x55, 0x55, 0x05, 0x00, 0x00, 0x08, 0x00, (char)0x80, 0x02,
+   0x00, 0x28, 0x00, (char)0x80, 0x02, 0x00, 0x28, 0x00, 0x00, 0x02, 0x00, 0x00,
+   0x55, 0x55, 0x05, 0x00, 0x00, 0x08, 0x00, (char)0x80, 0x02, 0x00, 0x28, 0x00,
+   (char)0x80, 0x02, 0x01, 0x28, 0x00, 0x02, 0x02, 0x00, 0x04, 0x55, 0x55, 0x0d,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};
--- a/src/uipp/prompter/col_sens.bm
+++ b/src/uipp/prompter/col_sens.bm
@@ -1,8 +1,8 @@
 #define col_sens_width 20
 #define col_sens_height 20
 static char col_sens_bits[] = {
-   0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x03,
-   0x00, 0x3c, 0x00, 0xc0, 0x03, 0x00, 0x3c, 0x00, 0x00, 0x03, 0x00, 0x00,
-   0xff, 0xff, 0x0f, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x03, 0x00, 0x3c, 0x00,
-   0xc0, 0x03, 0x01, 0x3c, 0x00, 0x03, 0x03, 0x00, 0x06, 0xff, 0xff, 0x0f,
+   0x00, 0x00, 0x00, (char)0xff, (char)0xff, 0x0f, 0x00, 0x00, 0x0c, 0x00, (char)0xc0, 0x03,
+   0x00, 0x3c, 0x00, (char)0xc0, 0x03, 0x00, 0x3c, 0x00, 0x00, 0x03, 0x00, 0x00,
+   (char)0xff, (char)0xff, 0x0f, 0x00, 0x00, 0x0c, 0x00, (char)0xc0, 0x03, 0x00, 0x3c, 0x00,
+   (char)0xc0, 0x03, 0x01, 0x3c, 0x00, 0x03, 0x03, 0x00, 0x06, (char)0xff, (char)0xff, 0x0f,
    0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};
--- a/src/uipp/prompter/grid1.bm
+++ b/src/uipp/prompter/grid1.bm
@@ -1,19 +1,19 @@
 #define grid1_width 37
 #define grid1_height 37
 static char grid1_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
    0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41,
-   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x41,
+   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41,
    0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04,
    0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10,
-   0xff, 0xff, 0xff, 0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
    0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41,
-   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x41,
+   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41,
    0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04,
    0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10,
-   0xff, 0xff, 0xff, 0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10,
    0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41,
-   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x41,
+   0x10, 0x41, 0x10, 0x04, 0x41, 0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41,
    0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04,
    0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10, 0x41, 0x10, 0x04, 0x41, 0x10,
-   0xff, 0xff, 0xff, 0xff, 0x1f};
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f};
--- a/src/uipp/prompter/grid2.bm
+++ b/src/uipp/prompter/grid2.bm
@@ -1,19 +1,19 @@
 #define grid2_width 37
 #define grid2_height 37
 static char grid2_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a,
-   0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0xff, 0xff, 0xff, 0xff,
-   0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0xff,
-   0xff, 0xff, 0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a,
+   0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff,
+   0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, (char)0xff,
+   (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40,
    0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10,
    0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a,
-   0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0xff, 0xff, 0xff, 0xff,
+   0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff,
    0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41,
    0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40,
    0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10,
    0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a,
    0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02,
-   0x10, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0xff,
-   0xff, 0xff, 0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40,
+   0x10, (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, (char)0xff,
+   (char)0xff, (char)0xff, (char)0xff, 0x1f, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40,
    0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10, 0x41, 0x0a, 0x40, 0x02, 0x10,
-   0xff, 0xff, 0xff, 0xff, 0x1f};
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, 0x1f};
--- a/src/uipp/prompter/grid3.bm
+++ b/src/uipp/prompter/grid3.bm
@@ -1,19 +1,19 @@
 #define grid3_width 37
 #define grid3_height 37
 static char grid3_bits[] = {
-   0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x0f, 0x04, 0x1e, 0x00, 0xe0, 0x00,
-   0x04, 0xe0, 0x00, 0x98, 0x00, 0x04, 0x20, 0x03, 0x86, 0x00, 0x04, 0x20,
+   0x00, (char)0xf0, (char)0xff, 0x01, 0x00, 0x00, 0x0f, 0x04, 0x1e, 0x00, (char)0xe0, 0x00,
+   0x04, (char)0xe0, 0x00, (char)0x98, 0x00, 0x04, 0x20, 0x03, (char)0x86, 0x00, 0x04, 0x20,
    0x0c, 0x01, 0x01, 0x04, 0x10, 0x10, 0x01, 0x01, 0x04, 0x10, 0x10, 0x02,
-   0x01, 0x04, 0x10, 0x08, 0x02, 0xe1, 0xff, 0x10, 0x08, 0x02, 0x1e, 0x04,
-   0x0f, 0x08, 0x84, 0x03, 0x04, 0x38, 0x04, 0x64, 0x02, 0x04, 0xc8, 0x04,
+   0x01, 0x04, 0x10, 0x08, 0x02, (char)0xe1, (char)0xff, 0x10, 0x08, 0x02, 0x1e, 0x04,
+   0x0f, 0x08, (char)0x84, 0x03, 0x04, 0x38, 0x04, 0x64, 0x02, 0x04, (char)0xc8, 0x04,
    0x1c, 0x02, 0x04, 0x08, 0x07, 0x08, 0x04, 0x04, 0x04, 0x02, 0x08, 0x04,
    0x04, 0x04, 0x02, 0x10, 0x04, 0x04, 0x04, 0x01, 0x10, 0x04, 0x04, 0x04,
-   0x01, 0x10, 0x08, 0x04, 0x02, 0x01, 0x20, 0xc8, 0x7f, 0x82, 0x00, 0x20,
-   0x38, 0x84, 0x83, 0x00, 0x20, 0x0e, 0x04, 0x8e, 0x00, 0x40, 0x13, 0x04,
-   0x51, 0x00, 0xc0, 0x10, 0x04, 0x61, 0x00, 0x40, 0x10, 0x04, 0x41, 0x00,
-   0x80, 0x10, 0x04, 0x21, 0x00, 0x80, 0x20, 0x84, 0x20, 0x00, 0x80, 0x20,
-   0x84, 0x20, 0x00, 0x00, 0x21, 0x84, 0x10, 0x00, 0x00, 0x21, 0x84, 0x10,
-   0x00, 0x00, 0x42, 0x5f, 0x08, 0x00, 0x00, 0xc2, 0x60, 0x08, 0x00, 0x00,
-   0x22, 0x80, 0x08, 0x00, 0x00, 0x14, 0x00, 0x05, 0x00, 0x00, 0x14, 0x00,
+   0x01, 0x10, 0x08, 0x04, 0x02, 0x01, 0x20, (char)0xc8, 0x7f, (char)0x82, 0x00, 0x20,
+   0x38, (char)0x84, (char)0x83, 0x00, 0x20, 0x0e, 0x04, (char)0x8e, 0x00, 0x40, 0x13, 0x04,
+   0x51, 0x00, (char)0xc0, 0x10, 0x04, 0x61, 0x00, 0x40, 0x10, 0x04, 0x41, 0x00,
+   (char)0x80, 0x10, 0x04, 0x21, 0x00, (char)0x80, 0x20, (char)0x84, 0x20, 0x00, (char)0x80, 0x20,
+   (char)0x84, 0x20, 0x00, 0x00, 0x21, (char)0x84, 0x10, 0x00, 0x00, 0x21, (char)0x84, 0x10,
+   0x00, 0x00, 0x42, 0x5f, 0x08, 0x00, 0x00, (char)0xc2, 0x60, 0x08, 0x00, 0x00,
+   0x22, (char)0x80, 0x08, 0x00, 0x00, 0x14, 0x00, 0x05, 0x00, 0x00, 0x14, 0x00,
    0x05, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00};
--- a/src/uipp/prompter/grid4.bm
+++ b/src/uipp/prompter/grid4.bm
@@ -4,16 +4,16 @@
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
-   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x80, 0x01, 0x00,
-   0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+   0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, (char)0x80, 0x01, 0x00,
+   0x00, 0x00, (char)0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x60, 0x00, 0x00, 0x00,
    0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
-   0x18, 0x80, 0x01, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x30,
+   0x18, (char)0x80, 0x01, 0x00, 0x00, 0x00, (char)0xb0, 0x01, 0x00, 0x00, 0x00, 0x30,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
-   0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80,
+   0x00, 0x00, 0x00, 0x00, 0x18, 0x00, (char)0x80, 0x01, 0x00, 0x00, 0x00, (char)0x80,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x36, 0x03,
    0x0c, 0x00, 0x00, 0x06, 0x03};
--- a/src/uipp/prompter/row_insens.bm
+++ b/src/uipp/prompter/row_insens.bm
@@ -1,8 +1,8 @@
 #define row_insens_width 20
 #define row_insens_height 20
 static char row_insens_bits[] = {
-   0x02, 0x81, 0x00, 0x80, 0x40, 0x00, 0x02, 0x81, 0x00, 0x40, 0x20, 0x00,
-   0x02, 0x81, 0x00, 0x40, 0x20, 0x00, 0x02, 0x81, 0x00, 0x20, 0x10, 0x00,
-   0x02, 0x81, 0x00, 0x20, 0x10, 0x00, 0x02, 0x81, 0x00, 0x10, 0x08, 0x00,
-   0x02, 0x81, 0x00, 0x10, 0x08, 0x00, 0x02, 0x81, 0x00, 0x08, 0x04, 0x00,
-   0x02, 0x91, 0x04, 0x08, 0x24, 0x02, 0x02, 0xc1, 0x01, 0x04, 0x82, 0x00};
+   0x02, (char)0x81, 0x00, (char)0x80, 0x40, 0x00, 0x02, (char)0x81, 0x00, 0x40, 0x20, 0x00,
+   0x02, (char)0x81, 0x00, 0x40, 0x20, 0x00, 0x02, (char)0x81, 0x00, 0x20, 0x10, 0x00,
+   0x02, (char)0x81, 0x00, 0x20, 0x10, 0x00, 0x02, (char)0x81, 0x00, 0x10, 0x08, 0x00,
+   0x02, (char)0x81, 0x00, 0x10, 0x08, 0x00, 0x02, (char)0x81, 0x00, 0x08, 0x04, 0x00,
+   0x02, (char)0x91, 0x04, 0x08, 0x24, 0x02, 0x02, (char)0xc1, 0x01, 0x04, (char)0x82, 0x00};
--- a/src/uipp/prompter/row_sens.bm
+++ b/src/uipp/prompter/row_sens.bm
@@ -1,8 +1,8 @@
 #define row_sens_width 20
 #define row_sens_height 20
 static char row_sens_bits[] = {
-   0x82, 0xc1, 0x00, 0x82, 0xc1, 0x00, 0x42, 0xa1, 0x00, 0x42, 0xa1, 0x00,
-   0x42, 0xa1, 0x00, 0x42, 0xa1, 0x00, 0x22, 0x91, 0x00, 0x22, 0x91, 0x00,
-   0x22, 0x91, 0x00, 0x22, 0x91, 0x00, 0x12, 0x89, 0x00, 0x12, 0x89, 0x00,
-   0x12, 0x89, 0x00, 0x12, 0x89, 0x00, 0x0a, 0x85, 0x00, 0x0a, 0x85, 0x00,
-   0x0a, 0xb5, 0x06, 0x0a, 0xe5, 0x03, 0x06, 0xc3, 0x01, 0x06, 0x83, 0x00};
+   (char)0x82, (char)0xc1, 0x00, (char)0x82, (char)0xc1, 0x00, 0x42, (char)0xa1, 0x00, 0x42, (char)0xa1, 0x00,
+   0x42, (char)0xa1, 0x00, 0x42, (char)0xa1, 0x00, 0x22, (char)0x91, 0x00, 0x22, (char)0x91, 0x00,
+   0x22, (char)0x91, 0x00, 0x22, (char)0x91, 0x00, 0x12, (char)0x89, 0x00, 0x12, (char)0x89, 0x00,
+   0x12, (char)0x89, 0x00, 0x12, (char)0x89, 0x00, 0x0a, (char)0x85, 0x00, 0x0a, (char)0x85, 0x00,
+   0x0a, (char)0xb5, 0x06, 0x0a, (char)0xe5, 0x03, 0x06, (char)0xc3, 0x01, 0x06, (char)0x83, 0x00};
--- a/src/uipp/widgets/backward.bm
+++ b/src/uipp/widgets/backward.bm
@@ -34,6 +34,6 @@
 #define backward_width 12
 #define backward_height 15
 static char backward_bits[] = {
-   0x00, 0x08, 0x00, 0x0e, 0x00, 0x0f, 0xc0, 0x0f, 0xf0, 0x0f, 0xf8, 0x0f,
-   0xfe, 0x0f, 0xff, 0x0f, 0xfe, 0x0f, 0xf8, 0x0f, 0xf0, 0x0f, 0xc0, 0x0f,
+   0x00, 0x08, 0x00, 0x0e, 0x00, 0x0f, (char)0xc0, 0x0f, (char)0xf0, 0x0f, (char)0xf8, 0x0f,
+   (char)0xfe, 0x0f, (char)0xff, 0x0f, (char)0xfe, 0x0f, (char)0xf8, 0x0f, (char)0xf0, 0x0f, (char)0xc0, 0x0f,
    0x00, 0x0f, 0x00, 0x0e, 0x00, 0x08 };
--- a/src/uipp/widgets/forward.bm
+++ b/src/uipp/widgets/forward.bm
@@ -34,6 +34,6 @@
 #define forward_width 12
 #define forward_height 15
 static char forward_bits[] = {
-   0x01, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x3f, 0x00, 0xff, 0x00, 0xff, 0x01,
-   0xff, 0x07, 0xff, 0x0f, 0xff, 0x07, 0xff, 0x01, 0xff, 0x00, 0x3f, 0x00,
+   0x01, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x3f, 0x00, (char)0xff, 0x00, (char)0xff, 0x01,
+   (char)0xff, 0x07, (char)0xff, 0x0f, (char)0xff, 0x07, (char)0xff, 0x01, (char)0xff, 0x00, 0x3f, 0x00,
    0x0f, 0x00, 0x07, 0x00, 0x01, 0x00 };
--- a/src/uipp/widgets/frame.bm
+++ b/src/uipp/widgets/frame.bm
@@ -34,7 +34,7 @@
 #define frame_width 22
 #define frame_height 16
 static char frame_bits[] = {
-   0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 0xff, 0x81, 0x40, 0xe0,
-   0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0,
-   0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0, 0x81, 0x40, 0xe0,
-   0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xff, 0xff, 0xff, 0x00, 0x00, 0xc0};
+   (char)0xff, (char)0xff, (char)0xff, (char)0xcc, (char)0xcc, (char)0xcc, (char)0xff, (char)0xff, (char)0xff, (char)0x81, 0x40, (char)0xe0,
+   (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0,
+   (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0, (char)0x81, 0x40, (char)0xe0,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xcc, (char)0xcc, (char)0xcc, (char)0xff, (char)0xff, (char)0xff, 0x00, 0x00, (char)0xc0};
--- a/src/uipp/widgets/loop.bm
+++ b/src/uipp/widgets/loop.bm
@@ -34,7 +34,7 @@
 #define loop_width 24
 #define loop_height 16
 static char loop_bits[] = {
-   0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0xfc, 0xff, 0x3f, 0x1e, 0x00, 0x78,
-   0x06, 0x00, 0x60, 0x07, 0x00, 0xe0, 0x03, 0x00, 0xc0, 0x03, 0x00, 0xc0,
-   0x03, 0x00, 0xc0, 0x07, 0x00, 0xe0, 0xc6, 0x00, 0x60, 0x9e, 0x03, 0x78,
-   0xfc, 0x0f, 0x3f, 0xf0, 0x0f, 0x0f, 0x80, 0x03, 0x00, 0xc0, 0x00, 0x00};
+   0x00, 0x00, 0x00, (char)0xf0, (char)0xff, 0x0f, (char)0xfc, (char)0xff, 0x3f, 0x1e, 0x00, 0x78,
+   0x06, 0x00, 0x60, 0x07, 0x00, (char)0xe0, 0x03, 0x00, (char)0xc0, 0x03, 0x00, (char)0xc0,
+   0x03, 0x00, (char)0xc0, 0x07, 0x00, (char)0xe0, (char)0xc6, 0x00, 0x60, (char)0x9e, 0x03, 0x78,
+   (char)0xfc, 0x0f, 0x3f, (char)0xf0, 0x0f, 0x0f, (char)0x80, 0x03, 0x00, (char)0xc0, 0x00, 0x00};
--- a/src/uipp/widgets/palim.bm
+++ b/src/uipp/widgets/palim.bm
@@ -34,7 +34,7 @@
 #define palim_width 24
 #define palim_height 15
 static char palim_bits[] = {
-   0x00, 0x00, 0x00, 0xff, 0x03, 0x02, 0xff, 0x07, 0x01, 0x00, 0x8e, 0x00,
-   0x18, 0x4c, 0x00, 0x0e, 0x2e, 0x00, 0xff, 0xd7, 0xff, 0xff, 0xeb, 0xff,
-   0x0e, 0x74, 0x00, 0x18, 0x32, 0x18, 0x00, 0x71, 0x70, 0x80, 0xe0, 0xff,
-   0x40, 0xc0, 0xff, 0x00, 0x00, 0x70, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00};
+   0x00, 0x00, 0x00, (char)0xff, 0x03, 0x02, (char)0xff, 0x07, 0x01, 0x00, (char)0x8e, 0x00,
+   0x18, 0x4c, 0x00, 0x0e, 0x2e, 0x00, (char)0xff, (char)0xd7, (char)0xff, (char)0xff, (char)0xeb, (char)0xff,
+   0x0e, 0x74, 0x00, 0x18, 0x32, 0x18, 0x00, 0x71, 0x70, (char)0x80, (char)0xe0, (char)0xff,
+   0x40, (char)0xc0, (char)0xff, 0x00, 0x00, 0x70, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00};
--- a/src/uipp/widgets/pause.bm
+++ b/src/uipp/widgets/pause.bm
@@ -34,5 +34,5 @@
 #define pause_width 8
 #define pause_height 15
 static char pause_bits[] = {
-   0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,
-   0xe7, 0xe7, 0xe7, 0x00};
+   (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7, (char)0xe7,
+   (char)0xe7, (char)0xe7, (char)0xe7, 0x00};
--- a/src/uipp/widgets/stepb.bm
+++ b/src/uipp/widgets/stepb.bm
@@ -34,7 +34,7 @@
 #define stepb_width 20
 #define stepb_height 15
 static char stepb_bits[] = {
-   0x00, 0xc8, 0x0c, 0x00, 0xce, 0x0c, 0x00, 0xcf, 0x0c, 0xc0, 0xcf, 0x0c,
-   0xf0, 0xcf, 0x0c, 0xf8, 0xcf, 0x0c, 0xfe, 0xcf, 0x0c, 0xff, 0xcf, 0x0c,
-   0xfe, 0xcf, 0x0c, 0xf8, 0xcf, 0x0c, 0xf0, 0xcf, 0x0c, 0xc0, 0xcf, 0x0c,
-   0x00, 0xcf, 0x0c, 0x00, 0xce, 0x0c, 0x00, 0xc8, 0x0c, 0x00};
+   0x00, (char)0xc8, 0x0c, 0x00, (char)0xce, 0x0c, 0x00, (char)0xcf, 0x0c, (char)0xc0, (char)0xcf, 0x0c,
+   (char)0xf0, (char)0xcf, 0x0c, (char)0xf8, (char)0xcf, 0x0c, (char)0xfe, (char)0xcf, 0x0c, (char)0xff, (char)0xcf, 0x0c,
+   (char)0xfe, (char)0xcf, 0x0c, (char)0xf8, (char)0xcf, 0x0c, (char)0xf0, (char)0xcf, 0x0c, (char)0xc0, (char)0xcf, 0x0c,
+   0x00, (char)0xcf, 0x0c, 0x00, (char)0xce, 0x0c, 0x00, (char)0xc8, 0x0c, 0x00};
--- a/src/uipp/widgets/step.bm
+++ b/src/uipp/widgets/step.bm
@@ -35,6 +35,6 @@
 #define step_height 10
 static char step_bits[] = {
    0x40, 0x66, 0x02, 0x70, 0x66, 0x0e, 0x78, 0x66, 0x1e, 0x7e, 0x66, 0x7e,
-   0x7f, 0x66, 0xfe, 0x7f, 0x66, 0xfe, 0x7e, 0x66, 0x7e, 0x78, 0x66, 0x1e,
+   0x7f, 0x66, (char)0xfe, 0x7f, 0x66, (char)0xfe, 0x7e, 0x66, 0x7e, 0x78, 0x66, 0x1e,
    0x70, 0x66, 0x0e, 0x40, 0x66, 0x02};
 
--- a/src/uipp/widgets/stepf.bm
+++ b/src/uipp/widgets/stepf.bm
@@ -35,6 +35,6 @@
 #define stepf_height 15
 static char stepf_bits[] = {
    0x33, 0x01, 0x00, 0x33, 0x07, 0x00, 0x33, 0x0f, 0x00, 0x33, 0x3f, 0x00,
-   0x33, 0xff, 0x00, 0x33, 0xff, 0x01, 0x33, 0xff, 0x07, 0x33, 0xff, 0x0f,
-   0x33, 0xff, 0x07, 0x33, 0xff, 0x01, 0x33, 0xff, 0x00, 0x33, 0x3f, 0x00,
+   0x33, (char)0xff, 0x00, 0x33, (char)0xff, 0x01, 0x33, (char)0xff, 0x07, 0x33, (char)0xff, 0x0f,
+   0x33, (char)0xff, 0x07, 0x33, (char)0xff, 0x01, 0x33, (char)0xff, 0x00, 0x33, 0x3f, 0x00,
    0x33, 0x0f, 0x00, 0x33, 0x07, 0x00, 0x33, 0x01, 0x00, 0x00};
--- a/src/uipp/widgets/stop.bm
+++ b/src/uipp/widgets/stop.bm
@@ -34,5 +34,5 @@
 #define stop_width 10
 #define stop_height 10
 static char stop_bits[] = {
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff,
+   (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff, (char)0xff};

